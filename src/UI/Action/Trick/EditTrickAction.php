<?phpnamespace App\UI\Action\Trick;use App\Domain\Model\Trick;use App\Domain\Repository\TrickManager;use App\UI\Form\Type\TrickType;use App\UI\Form\Handler\EditTrickHandler;use App\UI\Responder\Trick\EditTrickResponder;use Symfony\Component\Form\FormFactoryInterface;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpFoundation\Session\SessionInterface;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;/** * @Route("/modifier_un_trick/{slug}", name="trick_edit", methods={"GET","POST"}) */final class EditTrickAction{    /**     * @var FormFactoryInterface     */    private $formFactory;    /**     * @var EditTrickHandler     */    private $handler;    /**     * @var SessionInterface     */    private $session;    /**     * @var TrickManager     */    private $manager;    /**     * AddTrickAction constructor.     * @param FormFactoryInterface $formFactory     * @param EditTrickHandler $handler     * @param SessionInterface $session     * @param TrickManager $manager     */    public function __construct(        FormFactoryInterface $formFactory,        EditTrickHandler $handler,        SessionInterface $session,        TrickManager $manager)    {        $this->formFactory=$formFactory;        $this->handler=$handler;        $this->session=$session;        $this->manager=$manager;    }    /**     * @param Request $request     * @param EditTrickResponder $responder     * @return Response     * @throws \Twig_Error_Loader     * @throws \Twig_Error_Runtime     * @throws \Twig_Error_Syntax     */    public function __invoke(        Request $request,        EditTrickResponder $responder): Response    {        $trick=$this->manager            ->findTrickbySlug($request->attributes->get('slug'));        $listPhotos = clone $trick->getPhotos();        $listVideos = clone $trick->getVideos();        $form = $this->formFactory            ->create(TrickType::class, $trick)            ->handleRequest($request);        if ($this->handler->handle($form, $trick, $listPhotos, $listVideos)){            $this->session->getFlashBag()->add("info", "Le trick a bien été enregistré.");            return $responder(true, $form, $trick);        }        return $responder(false, $form);    }}