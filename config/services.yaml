parameters:
    locale: 'fr'
    fixtures_directory: '%kernel.project_dir%/src/Command/Fixtures'
    photos_directory: '%kernel.project_dir%/public/upload/photos'
    app.notifications.email_sender: kdu-prog@orange.fr

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\UI\Action\:
        resource: '../src/UI/Action'
        tags: ['controller.service_arguments']

    App\Command\:
        resource: '../src/Command'
        tags:
            - { name: console.command }

    App\Domain\Repository\:
        resource: '../src/Domain/Repository'
        tags: ['doctrine.repository_service']

    App\Service\:
        resource: '../src/Service'

    # Ajout d'une vidéo
    App\DoctrineListener\VideoCreationListener:
        arguments:
            - '@App\Service\IframeBuilder'
        tags:
            - { name: doctrine.event_listener, event: prePersist }


    # Ajout d'une photo
    App\Service\FileUploader:
        arguments:
            $photosDir: '%photos_directory%'

    App\DoctrineListener\PhotoUploadListener:
        arguments:
            - '@App\Service\FileUploader'
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postRemove }

    # Mise à jour des médias
    App\Service\CollectionUpdater:
        arguments:
            - '@doctrine.orm.entity_manager'

    App\EventSubscriber\RegistrationNotifySubscriber:
        $sender: '%app.notifications.email_sender%'
